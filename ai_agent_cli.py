"""
AI Agent CLI - ูุน ุฏุนู ุณูุงู ุงููุญุงุฏุซุฉ ูุชุญููู ุงูุตูุฑ
"""

import sys
import json
import os
import base64
from openai import OpenAI
from sentence_transformers import SentenceTransformer, util

# Load a pre-trained sentence transformer model
# Using a multilingual model for Arabic support
model = SentenceTransformer('sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2')

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

KNOWLEDGE_BASE = {
    "admissions": {
        "keywords": ["ูุจูู", "ุชุณุฌูู", "ุดุฑูุท", "ูุนุฏูุงุช", "ุชุฎุตุตุงุช", "ุจูุงููุฑููุณ", "ูุงุฌุณุชูุฑ", "ุฏูุชูุฑุงู", "ุชูุฏูู"],
        "info": """ูููุจูู ูุงูุชุณุฌูู ูู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉุ ูุฑุฌู ุฒูุงุฑุฉ ุงููููุน ุงูุฑุณูู ููุฌุงูุนุฉ ุฃู ุงูุชูุงุตู ูุน ุฏุงุฆุฑุฉ ุงููุจูู ูุงูุชุณุฌูู. ุชุฎุชูู ุดุฑูุท ุงููุจูู ูุงููุนุฏูุงุช ุงููุทููุจุฉ ุญุณุจ ุงูุชุฎุตุต ูุงูุฏุฑุฌุฉ ุงูุนูููุฉ (ุจูุงููุฑููุณุ ูุงุฌุณุชูุฑุ ุฏูุชูุฑุงู).
        ููููู ุงูุนุซูุฑ ุนูู ุงูุชูุงุตูู ุงููุงููุฉ ูุดุฑูุท ุงูุชูุฏูู ุนูู ุงูุฑุงุจุท ุงูุชุงูู: https://www.aau.edu.jo/ar/admission-and-registration
        ุฃู ุงูุงุชุตุงู ุนูู 0798877440."""
    },
    "fees": {
        "keywords": ["ุฑุณูู", "ูุณุท", "ุชูููุฉ", "ุฏูุน", "ูุงูู", "ุฃูุณุงุท"],
        "info": """ุชุฎุชูู ุงูุฑุณูู ุงูุฏุฑุงุณูุฉ ูู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ุญุณุจ ุงูุชุฎุตุต ูุงูุจุฑูุงูุฌ. ููุญุตูู ุนูู ูุนูููุงุช ุฏูููุฉ ุญูู ุงูุฑุณูู ุงูุฏุฑุงุณูุฉุ ูุฑุฌู ุฒูุงุฑุฉ ุตูุญุฉ ุงูุฑุณูู ุนูู ุงููููุน ุงูุฑุณูู ููุฌุงูุนุฉ ุฃู ุงูุชูุงุตู ูุน ุงูุฏุงุฆุฑุฉ ุงููุงููุฉ.
        ุฑุงุจุท ุงูุฑุณูู ุงูุฏุฑุงุณูุฉ: https://www.aau.edu.jo/ar/fees
        ุฃู ุงูุงุชุตุงู ุนูู 0798877440."""
    },
    "faculties": {
        "keywords": ["ูููุงุช", "ุชุฎุตุตุงุช", "ุฃูุณุงู", "ุฏุฑุงุณุฉ", "ุจุฑุงูุฌ"],
        "info": """ุชุถู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ุงูุนุฏูุฏ ูู ุงููููุงุช ูุงูุชุฎุตุตุงุช ุงููุชููุฒุฉุ ูููุง:
        - ูููุฉ ุงูุนููู ูุชูููููุฌูุง ุงููุนูููุงุช
        - ูููุฉ ุงูููุฏุณุฉ
        - ูููุฉ ุงูุฃุนูุงู
        - ูููุฉ ุงูุญููู
        - ูููุฉ ุงูุขุฏุงุจ ูุงูุนููู
        - ูููุฉ ุงูุนูุงุฑุฉ ูุงูุชุตููู
        - ูููุฉ ุนููู ุงูุทูุฑุงู
        ููููู ุงุณุชุนุฑุงุถ ุฌููุน ุงููููุงุช ูุงูุชุฎุตุตุงุช ุงููุชุงุญุฉ ุนูู ุงููููุน ุงูุฑุณูู ููุฌุงูุนุฉ: https://www.aau.edu.jo/ar/faculties-and-departments"""
    },
    "library": {
        "keywords": ["ููุชุจุฉ", "ูุชุจ", "ูุฑุงุฌุน", "ุจุญุซ", "ุฏุฑุงุณุงุช"],
        "info": """ุชููุฑ ููุชุจุฉ ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ูุตุงุฏุฑ ุบููุฉ ููุทูุงุจ ูุงูุจุงุญุซููุ ุจูุง ูู ุฐูู ุงููุชุจ ูุงููุฌูุงุช ุงูุนูููุฉ ูููุงุนุฏ ุงูุจูุงูุงุช ุงูุฅููุชุฑูููุฉ. ููููู ุฒูุงุฑุฉ ุงูููุชุจุฉ ุฎูุงู ุณุงุนุงุช ุงูุนูู ุฃู ุงููุตูู ุฅูู ูุตุงุฏุฑูุง ุงูุฑูููุฉ ุนุจุฑ ูููุน ุงูุฌุงูุนุฉ.
        ูููุฒูุฏ ูู ุงููุนูููุงุช ุญูู ุฎุฏูุงุช ุงูููุชุจุฉ: https://www.aau.edu.jo/ar/library"""
    },
    "scholarships": {
        "keywords": ["ููุญ", "ุฎุตููุงุช", "ูุณุงุนุฏุงุช", "ุฏุนู ูุงูู"],
        "info": """ุชูุฏู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ูุฌููุนุฉ ูุชููุนุฉ ูู ุงูููุญ ุงูุฏุฑุงุณูุฉ ูุงูุฎุตููุงุช ููุทูุงุจ ุงููุชููููู ูุฐูู ุงูุงุญุชูุงุฌุงุช ุงูุฎุงุตุฉ. ุชุชููุฑ ุชูุงุตูู ุงูููุญ ูุดุฑูุท ุงูุชูุฏูู ุนูููุง ุนูู ุงููููุน ุงูุฑุณูู ููุฌุงูุนุฉ.
        ุตูุญุฉ ุงูููุญ ุงูุฏุฑุงุณูุฉ: https://www.aau.edu.jo/ar/scholarships"""
    },
    "student_affairs": {
        "keywords": ["ุดุคูู ุทูุงุจ", "ุฎุฏูุงุช ุทูุงุจูุฉ", "ุฃูุดุทุฉ", "ุณูู", "ููุงุตูุงุช"],
        "info": """ุชูุฏู ุฏุงุฆุฑุฉ ุดุคูู ุงูุทูุจุฉ ูู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ูุฌููุนุฉ ูุงุณุนุฉ ูู ุงูุฎุฏูุงุช ูุงูุฃูุดุทุฉ ููุทูุงุจุ ุจูุง ูู ุฐูู ุงูุฅุฑุดุงุฏ ุงูุฃูุงุฏูููุ ุงูุฃูุดุทุฉ ุงููุงูููุฌูุฉุ ุฎุฏูุงุช ุงูุณูู ูุงูููุงุตูุงุชุ ูุงููุณุงุนุฏุฉ ูู ุญู ุงููุดููุงุช ุงูุทูุงุจูุฉ.
        ููุชูุงุตู ูุน ุดุคูู ุงูุทูุจุฉ: https://www.aau.edu.jo/ar/student-affairs"""
    },
    "location": {
        "keywords": ["ูููุน", "ุนููุงู", "ุฎุฑูุทุฉ", "ูุตูู", "ููู ุฃุตู"],
        "info": """ุชูุน ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ ูู ุดุงุฑุน ุงูุฃุฑุฏูุ ููุทูุฉ ูุจููุณุ ุนูุงูุ ุงูุฃุฑุฏู. ููููู ุงุณุชุฎุฏุงู ุฎุฑุงุฆุท Google ูููุตูู ุฅูู ุงูุฌุงูุนุฉ ุจุณูููุฉ.
        ุฑุงุจุท ุฎุฑุงุฆุท Google: https://maps.app.goo.gl/your-university-location"""
    },
    "contact": {
        "keywords": ["ุฑูู", "ูุงุชู", "ุชูุงุตู", "ุงุชุตุงู", "ููุจุงูู", "ุฌูุงู", "ุงูููู", "ุจุฑูุฏ", "email", "phone"],
        "info": """ูุนูููุงุช ุงูุชูุงุตู ูุน ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ:
๐ ุงููุงุชู: 0798877440
๐ ุงููููุน: https://www.aau.edu.jo/ar
๐ ุงูุนููุงู: ุดุงุฑุน ุงูุฃุฑุฏูุ ูุจูุณ - ุนูุงูุ ุงูุฃุฑุฏู
โฐ ุฃููุงุช ุงูุนูู: ูู ุงูุฃุญุฏ ุฅูู ุงูุฎููุณ"""
    },
    "technest": {
        "keywords": ["ุชููุณุช", "ูุฑูู", "team", "technest"],
        "info": """ูุฑูู TechNest - ูุฑูู ุฑุงุฆุน ูู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ:
๐ฎ ูุชุฎุตุตูู ูู ุชุทููุฑ ุงูุฃูุนุงุจ ูุงูุชุทุจููุงุช
๐ก ูุฑูู ูุจุฏุน ูููููุจ ูู ุทูุงุจ ูุฎุฑูุฌู ุงูุฌุงูุนุฉ
๐ ุงููููุน: https://technestjo.dev
๐ง ุงูุงูุถูุงู: https://technestjo.dev/join-us"""
    }
}

tools = [
    {
        "type": "function",
        "function": {
            "name": "search_aau_knowledge",
            "description": "ุงูุจุญุซ ูู ูุงุนุฏุฉ ูุนุฑูุฉ ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ",
            "parameters": {
                "type": "object",
                "properties": {
                    "query": {
                        "type": "string",
                        "description": "ุงูุงุณุชุนูุงู ุงููุฑุงุฏ ุงูุจุญุซ ุนูู"
                    }
                },
                "required": ["query"]
            }
        }
    }
]

def search_aau_knowledge(query):
    # Generate embedding for the query
    query_embedding = model.encode(query, convert_to_tensor=True)

    best_match_info = None
    max_similarity = -1

    for category, data in KNOWLEDGE_BASE.items():
        info_text = data.get("info", "")
        if not info_text: # Skip if no info text
            continue

        # Generate embedding for the info text
        info_embedding = model.encode(info_text, convert_to_tensor=True)

        # Calculate cosine similarity
        similarity = util.cos_sim(query_embedding, info_embedding)

        if similarity > max_similarity:
            max_similarity = similarity
            best_match_info = info_text
    
    # Set a threshold for similarity. Adjust as needed.
    # If the similarity is too low, it means the query is not relevant to our knowledge base.
    if max_similarity > 0.5:  # Example threshold, can be tuned
        return best_match_info
    else:
        return f"ูู ุฃุฌุฏ ูุนูููุงุช ูุงููุฉ ุนู \'{query}\'. ูุฑุฌู ุงูุงุชุตุงู ุจุงูุฌุงูุนุฉ ุนูู ุงูุฑูู 0798877440 ูููุณุงุนุฏุฉ."SYSTEM_MESSAGE = """ุฃูุช Tec ๐คุ ูุณุงุนุฏ ุฐูู ูุฎุจูุฑ ูู ุฌุงูุนุฉ ุนูุงู ุงูุนุฑุจูุฉ. ูููุชู ูู ุชูุฏูู ุฅุฌุงุจุงุช ุฏูููุฉ ูููุตูุฉ ูุดุงููุฉ ูุฌููุน ุงุณุชูุณุงุฑุงุช ุงูุทูุงุจ ูุงูููุธููู ูุงูุฒูุงุฑ ุญูู ุงูุฌุงูุนุฉ.

ุชุนูููุงุช ูููุฉ:
- **ุงูุชุฑููุฒ ุนูู ุงูุชูุงุตูู:** ุนูุฏ ุงูุฅุฌุงุจุฉ ุนูู ุงูุฃุณุฆูุฉุ ุงุจุญุซ ุจุนูู ูู ูุงุนุฏุฉ ุงููุนุฑูุฉ ุงููุชุงุญุฉ ููุฏู ูู ุงูุชูุงุตูู ุฐุงุช ุงูุตูุฉ. ูุง ุชูุชูู ุจุงูุฅุฌุงุจุงุช ุงููุฎุชุตุฑุฉ.
- **ุงุณุชุฎุฏุงู ุณูุงู ุงููุญุงุฏุซุฉ:** ุงุฌุจ ุนูู ุงูุฃุณุฆูุฉ ุจูุงุกู ุนูู ุงูุณูุงู ุงูุณุงุจู ูููุญุงุฏุซุฉ ูุถูุงู ุงุณุชูุฑุงุฑูุฉ ุงูููู ูุชูุฏูู ุฑุฏูุฏ ูุชูุงููุฉ.
- **ุชุญููู ุงูุตูุฑ:** ุฅุฐุง ุชู ุฅุฑุณุงู ุตูุฑุฉุ ูู ุจุชุญููููุง ุจุฏูุฉ ูุงุณุชุฎุฏู ุงููุนูููุงุช ุงููุณุชุฎูุตุฉ ูููุง ููุฅุฌุงุจุฉ ุนูู ุงูุณุคุงู ุฃู ุชูุฏูู ูุนูููุงุช ุฅุถุงููุฉ.
- **ุงูุงุณุชูุงุฏุฉ ุงููุตูู ูู ูุงุนุฏุฉ ุงููุนุฑูุฉ:** ุงุณุชุฎุฏู ูุธููุฉ `search_aau_knowledge` ุจูุนุงููุฉ ููุจุญุซ ุนู ุงููุนูููุงุช. ุฅุฐุง ูุฌุฏุช ูุนูููุงุช ุฐุงุช ุตูุฉุ ูู ุจุฏูุฌูุง ุจุดูู ุทุจูุนู ูู ุฅุฌุงุจุชู.
- **ุชุฌูุจ ุงูุฅุญุงูุฉ ุงููุจุงุดุฑุฉ:** ุญุงูู ูุฏุฑ ุงูุฅููุงู ุงูุฅุฌุงุจุฉ ุนูู ุงูุณุคุงู ูุจุงุดุฑุฉ. ูุง ุชุญูู ุงููุณุชุฎุฏู ุฅูู "ุงููุจูู ูุงูุชุณุฌูู" ุฃู "ุงูุฏุงุฆุฑุฉ ุงููุงููุฉ" ุฅูุง ุฅุฐุง ูุงูุช ุงููุนูููุงุช ุบูุฑ ูุชููุฑุฉ ูุฏูู ุชูุงููุง ุฃู ุชุชุทูุจ ุฅุฌุฑุงุกู ุดุฎุตููุง ูุจุงุดุฑูุง ูู ุงููุณุชุฎุฏู.
- **ุงููุฏ ูุงูุงุญุชุฑุงููุฉ:** ูู ูุฏูุงูุ ูุญุชุฑูุงูุ ูุงุณุชุฎุฏู ุงููุบุฉ ุงูุนุฑุจูุฉ ุงููุตุญู. ุงุณุชุฎุฏู ุงูุฅูููุฌู ุจุดูู ููุงุณุจ ูุฅุถูุงุก ุทุงุจุน ูุฏู.
- **ุงูุดููููุฉ:** ุฅุฐุง ูุงู ุงูุณุคุงู ูุชุทูุจ ูุนูููุงุช ูู ุนุฏุฉ ุฃูุณุงู ูู ุงูุฌุงูุนุฉุ ุญุงูู ุฌูุนูุง ูุชูุฏูู ุฅุฌุงุจุฉ ุดุงููุฉ.
- **ูุง ุชุฎูู:** ุฅุฐุง ูู ุชูู ูุชุฃูุฏุงู ูู ุงูุฅุฌุงุจุฉุ ุงุฐูุฑ ุฐูู ุจูุทู ูุงูุชุฑุญ ุทุฑูุงู ุจุฏููุฉ ููุญุตูู ุนูู ุงููุนูููุงุช (ูุซู ุฒูุงุฑุฉ ุงููููุน ุงูุฑุณูู ุฃู ุงูุชูุงุตู ูุน ุงููุณู ุงููุนูู).

ูุฏููุง ูู ุชูุฏูู ุชุฌุฑุจุฉ ูุณุงุนุฏุฉ ููุชุงุฒุฉ ูุดุงููุฉ ูููุณุชุฎุฏููู."""

def analyze_image(image_data):
    """ุชุญููู ุงูุตูุฑุฉ ุจุงุณุชุฎุฏุงู OpenAI Vision API"""
    try:
        # ุฅุฐุง ูุงูุช ุงูุตูุฑุฉ ุจุตูุบุฉ base64
        if image_data.startswith('data:image'):
            # ุงุณุชุฎุฑุงุฌ ุงูุจูุงูุงุช ูู data URL
            image_data = image_data.split(',')[1]
        
        return {
            "type": "image_url",
            "image_url": {
                "url": f"data:image/jpeg;base64,{image_data}"
            }
        }
    except Exception as e:
        return None

def chat(message, conversation_history=None, image_data=None):
    try:
        messages = [{"role": "system", "content": SYSTEM_MESSAGE}]
        
        if conversation_history:
            for hist_msg in conversation_history:
                messages.append({
                    "role": hist_msg.get("role", "user"),
                    "content": hist_msg.get("content", "")
                })
        
        # ุฅูุดุก ูุญุชูู ุงูุฑุณุงูุฉ
        user_content = [{"type": "text", "text": message}]
        
        # ุฅุถุงูุฉ ุงูุตูุฑุฉ ุฅุฐุง ูุงูุช ููุฌูุฏุฉ
        if image_data:
            image_content = analyze_image(image_data)
            if image_content:
                user_content.append(image_content)
        
        messages.append({
            "role": "user",
            "content": user_content if len(user_content) > 1 else message
        })
        
        response = client.chat.completions.create(
            model="gpt-4-vision-preview",
            messages=messages,
            tools=tools,
            tool_choice="auto"
        )
        
        response_message = response.choices[0].message
        tool_calls = response_message.tool_calls
        
        if tool_calls:
            messages.append(response_message)
            
            for tool_call in tool_calls:
                function_name = tool_call.function.name
                function_args = json.loads(tool_call.function.arguments)
                
                if function_name == "search_aau_knowledge":
                    function_response = search_aau_knowledge(function_args.get("query"))
                    messages.append({
                        "tool_call_id": tool_call.id,
                        "role": "tool",
                        "name": function_name,
                        "content": function_response
                    })
            
            second_response = client.chat.completions.create(
                model="gpt-4-vision-preview",
                messages=messages
            )
            return second_response.choices[0].message.content
        else:
            return response_message.content
    
    except Exception as e:
        return f"ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ: {str(e)}"

if __name__ == "__main__":
    input_data_raw = sys.stdin.read()
    try:
        input_data = json.loads(input_data_raw)
        message = input_data.get("message")
        conversation_history = input_data.get("conversationHistory")
        image_data = input_data.get("imageUrl")

        if not message:
            print(json.dumps({"error": "No message provided"}))
            sys.exit(1)
        
        response = chat(message, conversation_history, image_data)
        print(json.dumps({"response": response}, ensure_ascii=False))
    except json.JSONDecodeError:
        print(json.dumps({"error": "Invalid JSON input"}))
        sys.exit(1)
    except Exception as e:
        print(json.dumps({"error": f"An unexpected error occurred: {str(e)}"}))
        sys.exit(1)
